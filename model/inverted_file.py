from utils import *
import numpy as np
from scipy.cluster.vq import kmeans2
from numpy.linalg import norm
from scipy.spatial.distance import cdist
from collections import Counter
import operator
import math
# Loop over all training images
# Read in sift features for training images
# construct textons using kmeans 
# For each image in the training set, find the closest texton for each sift feature
# Question: How to find a limit of how many words should be in a neighborhood space?
# Save word to image in database

# Test time
# Given a new image, extract words 
# For each word, get the corresponding images. Create an image -> word db
# The image with the maximum amount of words should rank first.
# For images with same amount of words, select randomly?

class MLModel:
    def __init__(self, word_indexer, image_indexer, word_to_image, sift_features):
        self.word_indexer = word_indexer
        self.image_indexer = image_indexer
        self.word_to_image = word_to_image
        self.sift_features = sift_features

    def evaluate (self, test_data):
        weighted_words = get_weighted_words(self.word_to_image)

        visual_words = np.array([self.word_indexer[key] for key in self.word_indexer.keys()])
        print(visual_words.shape)

        for idx, image_idx in enumerate(test_data):
            print(image_idx)
            image_sift_features = self.sift_features[1][image_idx]
            image_word_list = find_closest_words(image_sift_features, visual_words)

            # Construct word frequencies
            word_freqs = Counter(image_word_list)

            for key in word_freqs.keys():
                word_freqs[key] = word_freqs[key] * weighted_words[key]
            freqs = sorted(word_freqs.items(), key=operator.itemgetter(1), reverse=True)
            print ("FREQS")
            print(freqs)

        pass

def get_weighted_words(word_to_image):
    weights = []

    word_to_image = {0: set(), 1: {1, 2, 3, 4, 6, 7, 9, 10, 12, 14, 18, 22, 23, 25, 26, 27, 30, 31, 32, 34, 35, 40, 45, 46, 47, 48, 53, 54, 55, 57, 58, 59, 60, 63, 64, 67, 68, 69, 70, 79, 81, 84, 86, 87, 90, 91, 93, 94, 95, 96, 97, 100, 104, 106, 108, 113, 115, 116, 118, 119, 121, 122, 123, 124, 126, 128, 129, 131, 132, 133, 134, 139, 140, 141, 145, 149, 150, 153, 155, 165, 167, 169, 170, 172, 174, 176, 177, 178, 179, 180, 185, 186, 187, 190, 193, 196, 197, 201, 204, 212, 214, 215, 216, 223, 232, 235, 237, 239, 243, 244, 247, 248, 249, 250, 251, 253, 254, 256, 257, 259, 260, 262, 263, 265, 266, 267, 270, 272, 274, 275, 279, 281, 283, 286, 287, 289, 291, 292, 295, 296, 298, 300, 301, 302, 305, 306, 309, 311, 313, 314, 318, 323, 324, 325, 330, 334, 335, 339, 340, 341, 342, 346, 349, 350, 353, 354, 355, 357, 359, 364, 366, 367, 369, 370, 371, 378, 379, 380, 382, 383, 389, 391, 392, 393, 394, 395, 397, 398, 399, 401, 403, 404, 406, 407, 408, 411, 412, 414, 415, 416, 420, 421, 422, 423, 429, 430, 431, 432, 433, 434, 435, 437, 442, 444, 445, 447, 448, 449, 452, 453, 454, 456, 457, 458, 460, 463, 465, 470, 472, 474, 478, 480, 481, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 500}, 2: set(), 3: set(), 4: {258, 140, 277, 26, 282, 419, 295, 297, 300, 56, 58, 187, 314, 317, 445, 189, 446, 321, 316, 324, 68, 76, 77, 83, 480, 225, 482, 227, 233, 364, 118, 119, 120, 125}, 5: {99, 38, 240, 52, 254, 379, 252, 382}, 6: set(), 7: set(), 8: {160, 391, 392, 77, 79, 305, 17, 182}, 9: {1, 5, 399, 147, 148, 408, 24, 409, 28, 290, 292, 37, 39, 426, 427, 47, 176, 177, 307, 309, 442, 315, 317, 190, 66, 73, 335, 216, 217, 475, 476, 99, 362, 111, 125}, 10: set(), 11: set(), 12: {8, 140, 21, 407, 281, 291, 419, 293, 420, 40, 179, 180, 51, 182, 186, 445, 194, 74, 76, 78, 211, 215, 481, 105, 362, 378}, 13: {245}, 14: set(), 15: {257, 18, 274, 361}, 16: {249, 59}, 17: {116, 182}, 18: set(), 19: set(), 20: {7, 9, 269, 142, 15, 271, 272, 25, 287, 298, 175, 48, 49, 50, 437, 54, 187, 77, 81, 212, 214, 87, 89, 346, 96, 356, 358, 488, 489, 241, 377}, 21: set(), 22: {2, 7, 9, 15, 16, 19, 23, 25, 27, 30, 33, 34, 48, 49, 50, 53, 54, 55, 60, 61, 63, 65, 68, 71, 80, 82, 84, 85, 89, 95, 100, 101, 106, 116, 117, 118, 126, 129, 130, 132, 133, 136, 144, 154, 157, 161, 162, 163, 172, 175, 179, 180, 182, 183, 187, 188, 189, 191, 194, 196, 210, 214, 221, 222, 228, 230, 231, 232, 240, 241, 242, 255, 257, 261, 269, 283, 288, 290, 293, 294, 297, 300, 303, 308, 310, 312, 315, 320, 321, 327, 330, 334, 343, 344, 352, 356, 358, 359, 361, 372, 378, 380, 383, 387, 390, 399, 401, 414, 417, 419, 420, 422, 425, 433, 434, 444, 450, 452, 454, 458, 467, 468, 472, 474, 489, 492, 493, 496, 498, 499, 500}, 23: set(), 24: set(), 25: {3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 20, 23, 24, 25, 26, 27, 31, 32, 33, 34, 35, 38, 40, 45, 46, 48, 54, 55, 57, 58, 59, 60, 63, 64, 67, 69, 70, 71, 79, 81, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 104, 106, 108, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 133, 140, 141, 142, 145, 149, 150, 154, 155, 156, 162, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 179, 180, 185, 186, 188, 189, 190, 193, 194, 196, 197, 202, 204, 205, 206, 207, 209, 211, 213, 214, 215, 216, 219, 221, 222, 223, 224, 228, 230, 232, 234, 235, 236, 237, 238, 239, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 260, 263, 265, 266, 267, 268, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 283, 287, 288, 289, 291, 292, 294, 296, 297, 299, 300, 301, 302, 305, 306, 308, 309, 310, 312, 314, 316, 318, 319, 321, 322, 324, 325, 329, 330, 333, 334, 335, 336, 337, 338, 339, 340, 342, 346, 349, 350, 352, 353, 354, 355, 356, 358, 359, 361, 364, 365, 369, 370, 371, 376, 379, 380, 383, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 429, 430, 431, 432, 433, 434, 435, 437, 438, 443, 444, 445, 446, 447, 448, 449, 450, 453, 455, 456, 458, 460, 462, 463, 465, 466, 467, 468, 470, 472, 473, 474, 476, 478, 479, 480, 481, 483, 485, 486, 488, 489, 490, 494, 495, 496, 497, 498, 499, 500}, 26: set(), 27: set(), 28: {182}, 29: set(), 30: {76, 332, 78, 181, 188}, 31: {384, 385, 386, 388, 453, 294, 90, 8, 269, 462, 463, 15, 241, 77, 81, 21, 217, 218, 411, 31}, 32: set(), 33: set(), 34: set(), 35: {1, 5, 10, 19, 26, 28, 39, 49, 51, 52, 56, 58, 73, 76, 77, 83, 99, 101, 102, 105, 110, 112, 117, 119, 123, 135, 137, 140, 141, 142, 143, 149, 150, 151, 155, 156, 157, 159, 160, 161, 165, 166, 170, 171, 176, 177, 181, 182, 184, 187, 189, 193, 196, 197, 198, 201, 202, 203, 205, 209, 215, 219, 223, 224, 226, 233, 234, 236, 238, 244, 247, 249, 255, 256, 258, 259, 277, 279, 282, 283, 289, 292, 297, 298, 299, 301, 304, 306, 308, 309, 310, 311, 312, 313, 314, 315, 317, 319, 320, 321, 322, 324, 325, 331, 332, 335, 336, 337, 346, 350, 351, 359, 361, 371, 374, 375, 376, 377, 393, 394, 396, 397, 402, 404, 408, 413, 417, 418, 419, 420, 426, 427, 430, 434, 435, 438, 441, 443, 445, 448, 450, 452, 457, 459, 466, 469, 470, 476, 477, 481, 482, 488, 500}, 36: set(), 37: set(), 38: {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 46, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 72, 74, 79, 80, 81, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 110, 113, 114, 115, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 160, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 183, 185, 186, 187, 189, 190, 193, 194, 196, 197, 201, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 226, 227, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 316, 318, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 499, 500}, 39: set(), 40: {267, 141, 142, 145, 298, 170, 299, 174, 47, 51, 182, 65, 201, 461, 77, 338, 346, 476, 486, 488, 238, 366, 252}, 41: set(), 42: set(), 43: set(), 44: {164, 307, 28, 47}, 45: set(), 46: set(), 47: set(), 48: set(), 49: set(), 50: set(), 51: set(), 52: set(), 53: {292, 171, 205, 253, 351}, 54: set(), 55: {269, 147, 148, 21, 22, 284, 285, 301, 49, 50, 438, 327, 82, 89, 353, 354, 225, 487, 240, 376, 250, 252}, 56: {427, 372, 327}, 57: set(), 58: set(), 59: set(), 60: set(), 61: {362, 59, 37}, 62: {130, 35, 232, 233, 458, 9, 493, 303, 222, 499, 468, 248, 26, 60, 221, 190}, 63: set(), 64: {257, 131, 4, 6, 266, 394, 398, 15, 14, 273, 274, 20, 405, 152, 409, 282, 26, 155, 415, 289, 38, 167, 428, 301, 430, 173, 50, 435, 312, 57, 59, 447, 448, 67, 69, 70, 202, 331, 333, 209, 466, 212, 341, 342, 87, 89, 92, 221, 222, 223, 96, 352, 478, 94, 95, 105, 234, 108, 237, 494, 495, 496, 369, 115, 249}, 65: {0, 16, 17, 144, 411, 156, 162, 172, 303, 183, 446, 320, 73, 210, 84, 224, 230, 233, 364, 493, 110, 499, 115}, 66: set(), 67: {257, 7, 9, 400, 275, 276, 155, 414, 293, 166, 295, 298, 302, 50, 52, 315, 318, 452, 197, 71, 72, 77, 79, 463, 468, 470, 471, 90, 91, 94, 351, 223, 353, 354, 99, 484, 100, 483, 104, 106, 236, 108, 369, 499, 245, 120, 255}, 68: set(), 69: set(), 70: {129, 390, 393, 44, 79, 111, 498, 83, 30, 287}, 71: set(), 72: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 26, 28, 30, 32, 33, 34, 37, 38, 39, 40, 41, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 61, 64, 65, 66, 67, 68, 71, 72, 73, 74, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 88, 89, 92, 93, 95, 96, 98, 99, 100, 102, 104, 105, 106, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 165, 166, 167, 169, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 206, 207, 210, 211, 212, 213, 214, 215, 216, 217, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 254, 255, 256, 258, 259, 260, 261, 262, 266, 267, 268, 269, 270, 271, 273, 275, 276, 278, 280, 281, 284, 285, 286, 287, 288, 289, 290, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 319, 320, 321, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 367, 368, 371, 372, 373, 374, 376, 377, 378, 380, 381, 382, 383, 387, 389, 390, 391, 392, 393, 394, 395, 399, 400, 401, 402, 403, 404, 406, 408, 411, 413, 414, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 429, 431, 432, 433, 434, 435, 437, 438, 441, 442, 443, 444, 445, 446, 448, 450, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 470, 471, 472, 474, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500}, 73: {0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 198, 199, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 247, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500}, 74: set(), 75: set(), 76: set(), 77: set(), 78: set(), 79: {83, 373}, 80: set(), 81: {0, 256, 130, 390, 135, 138, 404, 277, 413, 295, 172, 303, 304, 181, 182, 55, 184, 188, 190, 191, 321, 454, 71, 199, 459, 76, 205, 79, 335, 210, 467, 345, 92, 482, 229, 102, 486, 485, 116, 380}, 82: {1, 3, 5, 7, 11, 21, 22, 31, 34, 57, 87, 90, 91, 94, 104, 112, 120, 123, 124, 127, 131, 165, 172, 173, 176, 177, 221, 222, 243, 251, 269, 271, 272, 281, 288, 296, 298, 300, 307, 308, 309, 310, 313, 318, 330, 331, 333, 334, 339, 341, 342, 355, 356, 358, 359, 366, 369, 370, 372, 373, 377, 382, 384, 385, 386, 388, 389, 401, 405, 411, 412, 415, 416, 417, 424, 428, 429, 430, 435, 438, 449, 456, 458, 460, 472, 473, 478, 481, 491, 500}, 83: set(), 84: set(), 85: {240, 108}, 86: set(), 87: set(), 88: set(), 89: {13, 14, 18, 22, 24, 31, 34, 35, 40, 49, 50, 53, 59, 67, 71, 74, 94, 98, 101, 104, 110, 112, 115, 120, 123, 124, 126, 131, 139, 147, 148, 149, 150, 163, 164, 165, 166, 173, 176, 177, 178, 185, 193, 205, 231, 234, 235, 236, 241, 242, 243, 245, 252, 253, 255, 256, 261, 266, 277, 284, 285, 290, 291, 296, 306, 307, 311, 313, 316, 318, 322, 329, 331, 333, 341, 342, 349, 352, 353, 354, 362, 363, 364, 368, 373, 376, 379, 380, 381, 382, 384, 385, 386, 388, 391, 392, 396, 398, 403, 405, 410, 413, 415, 416, 425, 427, 428, 429, 431, 432, 433, 440, 448, 449, 458, 461, 465, 473, 477, 479, 487, 493, 494, 495, 496}, 90: set(), 91: set(), 92: {384, 385, 386, 256, 388, 261, 263, 136, 265, 139, 397, 14, 277, 406, 413, 415, 416, 37, 300, 301, 430, 431, 176, 177, 440, 185, 59, 70, 74, 461, 334, 77, 81, 339, 349, 479, 352, 353, 354, 98, 99, 362, 363, 494, 495, 368, 241, 114, 115, 379, 253, 126}, 93: set(), 94: set(), 95: set(), 96: {0, 9, 10, 12, 15, 17, 19, 22, 25, 27, 35, 38, 45, 48, 55, 59, 60, 63, 68, 71, 91, 94, 95, 100, 113, 116, 118, 119, 120, 127, 129, 130, 132, 153, 156, 157, 163, 174, 178, 179, 180, 185, 191, 197, 204, 209, 214, 224, 225, 231, 245, 254, 267, 274, 282, 287, 296, 303, 308, 310, 312, 317, 332, 335, 338, 346, 349, 350, 364, 367, 377, 381, 384, 385, 386, 387, 388, 406, 407, 409, 417, 423, 424, 425, 427, 444, 449, 470, 472, 478}, 97: set(), 98: {171, 211}, 99: set()}

    # Do tf-idf weighting to weight the words
    N = len(word_to_image.keys())
    for key in word_to_image.keys():
        if len(word_to_image[key]) == 0:
            weights.append(0)
        else:
            tf = 1/N
            idf = math.log10(N / len(word_to_image[key])) 
            weights.append(tf*idf)
    s = sum([abs(i) for i in weights])
    norm = [abs(i)/s for i in weights]
    return norm

# Train machine learning model
def train_ml_model(train_data, image_indexer, sift_features, args):
    visual_words, _ = kmeans2(sift_features[0], args.num_clusters)

    # Construct index -> word indexer
    word_dict = {}
    for i, word in enumerate(visual_words):
        word_dict[i] = word

    # Word to index dictionary
    word_to_image = {}
    for i in range(args.num_clusters):
        word_to_image[i] = set()


    # Construct inverted file index of word_index to image_index list
    for idx, image_idx in enumerate(train_data):
        print(image_idx)
        image_sift_features = sift_features[1][image_idx]
        print(image_sift_features.shape)
        print(len(image_sift_features))
        image_word_list = find_closest_words(image_sift_features, visual_words)
        c = set()
        for i in image_word_list: c.add(i)
        print("NUM UNIQUE ELEMENTS:", len(c))
        
        # Construct word frequencies
        word_freqs = Counter(image_word_list)
        freqs = sorted(word_freqs.items(), key=operator.itemgetter(1), reverse=True)
        #print(freqs)
        for i in freqs[:10]:
            if i[1] >= .05*len(image_sift_features):
                a = word_to_image[i[0]]
                a.add(image_idx)
                word_to_image[i[0]] = a
    
    print(word_to_image)
    return MLModel(word_dict,image_indexer,word_to_image,sift_features)

# Find closest word for each sift_feature. 
def find_closest_words(image_sift_features, mean_features):
    result = []
    for target in image_sift_features:
        # Find similarity coefficient
        #sim = [target.dot(feat)/(norm(target) * norm(feat)) for feat in mean_features]
        #sim = np.array(sim)

        # Distance based 
        sim = [cdist(feat.reshape(1,-1), target.reshape(1,-1), 'cosine').reshape(-1)[0] for feat in mean_features]
        #print(max(sim))
        sim = np.array(sim)
        result.append(sim.argmax())
    return result